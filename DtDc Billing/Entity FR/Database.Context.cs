//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DtDc_Billing.Entity_FR
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class db_a71c08_elitetokenEntities : DbContext
    {
        public db_a71c08_elitetokenEntities()
            : base("name=db_a71c08_elitetokenEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<addcodamount> addcodamounts { get; set; }
        public virtual DbSet<addtopayamount> addtopayamounts { get; set; }
        public virtual DbSet<Admin> Admins { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<Complaint> Complaints { get; set; }
        public virtual DbSet<deliverydata> deliverydatas { get; set; }
        public virtual DbSet<Destination> Destinations { get; set; }
        public virtual DbSet<Dtdc_Ptp> Dtdc_Ptp { get; set; }
        public virtual DbSet<dtdcPlu> dtdcPlus { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Expense> Expenses { get; set; }
        public virtual DbSet<ExpiredStationary> ExpiredStationaries { get; set; }
        public virtual DbSet<express_cargo> express_cargo { get; set; }
        public virtual DbSet<FirmDetail> FirmDetails { get; set; }
        public virtual DbSet<Holiday> Holidays { get; set; }
        public virtual DbSet<Holiday1> Holidays1 { get; set; }
        public virtual DbSet<Issue> Issues { get; set; }
        public virtual DbSet<Nondox> Nondoxes { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<Other_Service> Other_Service { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<popupimage> popupimages { get; set; }
        public virtual DbSet<Priority> Priorities { get; set; }
        public virtual DbSet<Ratem> Ratems { get; set; }
        public virtual DbSet<Receipt_details> Receipt_details { get; set; }
        public virtual DbSet<RedeemOtp> RedeemOtps { get; set; }
        public virtual DbSet<ReplyAdmin> ReplyAdmins { get; set; }
        public virtual DbSet<Saving> Savings { get; set; }
        public virtual DbSet<sectorName> sectorNames { get; set; }
        public virtual DbSet<Sector> Sectors { get; set; }
        public virtual DbSet<Service_list> Service_list { get; set; }
        public virtual DbSet<singleinvoiceconsignment> singleinvoiceconsignments { get; set; }
        public virtual DbSet<Stationary> Stationaries { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<wallet_History> wallet_History { get; set; }
        public virtual DbSet<WalletPoint> WalletPoints { get; set; }
        public virtual DbSet<TransactionView> TransactionViews { get; set; }
        public virtual DbSet<RaiseIssue> RaiseIssues { get; set; }
        public virtual DbSet<NewNotification> NewNotifications { get; set; }
        public virtual DbSet<UserModuleList> UserModuleLists { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<Cash> Cashes { get; set; }
        public virtual DbSet<CreditNote> CreditNotes { get; set; }
        public virtual DbSet<NEFT> NEFTs { get; set; }
        public virtual DbSet<Cheque> Cheques { get; set; }
        public virtual DbSet<Sendmessage> Sendmessages { get; set; }
        public virtual DbSet<AdminAccessPage> AdminAccessPages { get; set; }
        public virtual DbSet<paymentLog> paymentLogs { get; set; }
        public virtual DbSet<registration> registrations { get; set; }
        public virtual DbSet<Franchisee> Franchisees { get; set; }
    
        public virtual ObjectResult<getNotification_Result> getNotification()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getNotification_Result>("getNotification");
        }
    
        public virtual ObjectResult<getUserModuleList_Result> getUserModuleList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getUserModuleList_Result>("getUserModuleList");
        }
    
        public virtual ObjectResult<getRemaining_Result> getRemaining(string pfCode)
        {
            var pfCodeParameter = pfCode != null ?
                new ObjectParameter("PfCode", pfCode) :
                new ObjectParameter("PfCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getRemaining_Result>("getRemaining", pfCodeParameter);
        }
    
        public virtual ObjectResult<getRemainingAll_Result> getRemainingAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getRemainingAll_Result>("getRemainingAll");
        }
    
        public virtual ObjectResult<getLogin_Result> getLogin(string username, string password, string pFCode)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var pFCodeParameter = pFCode != null ?
                new ObjectParameter("PFCode", pFCode) :
                new ObjectParameter("PFCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getLogin_Result>("getLogin", usernameParameter, passwordParameter, pFCodeParameter);
        }
    
        public virtual ObjectResult<getInvoice_Result> getInvoice(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string customerid, string pfcode)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var customeridParameter = customerid != null ?
                new ObjectParameter("Customerid", customerid) :
                new ObjectParameter("Customerid", typeof(string));
    
            var pfcodeParameter = pfcode != null ?
                new ObjectParameter("pfcode", pfcode) :
                new ObjectParameter("pfcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getInvoice_Result>("getInvoice", fromDateParameter, toDateParameter, customeridParameter, pfcodeParameter);
        }
    
        public virtual ObjectResult<getInvoiceWithoutCompany_Result> getInvoiceWithoutCompany(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string pfcode)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var pfcodeParameter = pfcode != null ?
                new ObjectParameter("pfcode", pfcode) :
                new ObjectParameter("pfcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getInvoiceWithoutCompany_Result>("getInvoiceWithoutCompany", fromDateParameter, toDateParameter, pfcodeParameter);
        }
    
        public virtual ObjectResult<getPayment_Result> getPayment(string paymentType, string pfcode)
        {
            var paymentTypeParameter = paymentType != null ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(string));
    
            var pfcodeParameter = pfcode != null ?
                new ObjectParameter("pfcode", pfcode) :
                new ObjectParameter("pfcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getPayment_Result>("getPayment", paymentTypeParameter, pfcodeParameter);
        }
    
        public virtual ObjectResult<Sp_GetSingleConsignment_Result> Sp_GetSingleConsignment(string con_no, string pfcode)
        {
            var con_noParameter = con_no != null ?
                new ObjectParameter("Con_no", con_no) :
                new ObjectParameter("Con_no", typeof(string));
    
            var pfcodeParameter = pfcode != null ?
                new ObjectParameter("pfcode", pfcode) :
                new ObjectParameter("pfcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetSingleConsignment_Result>("Sp_GetSingleConsignment", con_noParameter, pfcodeParameter);
        }
    
        public virtual ObjectResult<destinationCount_Result> destinationCount(string pfcode)
        {
            var pfcodeParameter = pfcode != null ?
                new ObjectParameter("Pfcode", pfcode) :
                new ObjectParameter("Pfcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<destinationCount_Result>("destinationCount", pfcodeParameter);
        }
    
        public virtual ObjectResult<getReceiptDetails_Result> getReceiptDetails(string pfcode)
        {
            var pfcodeParameter = pfcode != null ?
                new ObjectParameter("pfcode", pfcode) :
                new ObjectParameter("pfcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getReceiptDetails_Result>("getReceiptDetails", pfcodeParameter);
        }
    
        public virtual ObjectResult<getPaymentTrackCash_Result> getPaymentTrackCash(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string companyName, string pfcode)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var pfcodeParameter = pfcode != null ?
                new ObjectParameter("Pfcode", pfcode) :
                new ObjectParameter("Pfcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getPaymentTrackCash_Result>("getPaymentTrackCash", fromDateParameter, toDateParameter, companyNameParameter, pfcodeParameter);
        }
    
        public virtual ObjectResult<getPaymentTrackCheque_Result> getPaymentTrackCheque(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string companyName, string pfcode)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var pfcodeParameter = pfcode != null ?
                new ObjectParameter("Pfcode", pfcode) :
                new ObjectParameter("Pfcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getPaymentTrackCheque_Result>("getPaymentTrackCheque", fromDateParameter, toDateParameter, companyNameParameter, pfcodeParameter);
        }
    
        public virtual ObjectResult<getPaymentTrackCreditNote_Result> getPaymentTrackCreditNote(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string companyName, string pfcode)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var pfcodeParameter = pfcode != null ?
                new ObjectParameter("Pfcode", pfcode) :
                new ObjectParameter("Pfcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getPaymentTrackCreditNote_Result>("getPaymentTrackCreditNote", fromDateParameter, toDateParameter, companyNameParameter, pfcodeParameter);
        }
    
        public virtual ObjectResult<getPaymentTrackNEFT_Result> getPaymentTrackNEFT(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string companyName, string pfcode)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var pfcodeParameter = pfcode != null ?
                new ObjectParameter("Pfcode", pfcode) :
                new ObjectParameter("Pfcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getPaymentTrackNEFT_Result>("getPaymentTrackNEFT", fromDateParameter, toDateParameter, companyNameParameter, pfcodeParameter);
        }
    
        public virtual ObjectResult<ReceipentsPhoneFromReceiptdetails_Result> ReceipentsPhoneFromReceiptdetails(string enterValue, string pfcode)
        {
            var enterValueParameter = enterValue != null ?
                new ObjectParameter("enterValue", enterValue) :
                new ObjectParameter("enterValue", typeof(string));
    
            var pfcodeParameter = pfcode != null ?
                new ObjectParameter("pfcode", pfcode) :
                new ObjectParameter("pfcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReceipentsPhoneFromReceiptdetails_Result>("ReceipentsPhoneFromReceiptdetails", enterValueParameter, pfcodeParameter);
        }
    
        public virtual ObjectResult<SenderPhoneFromReceiptdetails_Result> SenderPhoneFromReceiptdetails(string enterValue, string pfcode)
        {
            var enterValueParameter = enterValue != null ?
                new ObjectParameter("enterValue", enterValue) :
                new ObjectParameter("enterValue", typeof(string));
    
            var pfcodeParameter = pfcode != null ?
                new ObjectParameter("pfcode", pfcode) :
                new ObjectParameter("pfcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SenderPhoneFromReceiptdetails_Result>("SenderPhoneFromReceiptdetails", enterValueParameter, pfcodeParameter);
        }
    
        public virtual ObjectResult<getCheckBookingListAll_Result> getCheckBookingListAll(string pfcode)
        {
            var pfcodeParameter = pfcode != null ?
                new ObjectParameter("pfcode", pfcode) :
                new ObjectParameter("pfcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getCheckBookingListAll_Result>("getCheckBookingListAll", pfcodeParameter);
        }
    
        public virtual ObjectResult<getCheckBookingList_Result> getCheckBookingList(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string customerid, string pfcode)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var customeridParameter = customerid != null ?
                new ObjectParameter("Customerid", customerid) :
                new ObjectParameter("Customerid", typeof(string));
    
            var pfcodeParameter = pfcode != null ?
                new ObjectParameter("pfcode", pfcode) :
                new ObjectParameter("pfcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getCheckBookingList_Result>("getCheckBookingList", fromDateParameter, toDateParameter, customeridParameter, pfcodeParameter);
        }
    
        public virtual ObjectResult<getCheckBookingListWithoutCompany_Result> getCheckBookingListWithoutCompany(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string pfcode)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var pfcodeParameter = pfcode != null ?
                new ObjectParameter("pfcode", pfcode) :
                new ObjectParameter("pfcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getCheckBookingListWithoutCompany_Result>("getCheckBookingListWithoutCompany", fromDateParameter, toDateParameter, pfcodeParameter);
        }
    
        public virtual ObjectResult<getCreditorsInvoice_Result> getCreditorsInvoice(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string customerid, string pfcode)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var customeridParameter = customerid != null ?
                new ObjectParameter("Customerid", customerid) :
                new ObjectParameter("Customerid", typeof(string));
    
            var pfcodeParameter = pfcode != null ?
                new ObjectParameter("pfcode", pfcode) :
                new ObjectParameter("pfcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getCreditorsInvoice_Result>("getCreditorsInvoice", fromDateParameter, toDateParameter, customeridParameter, pfcodeParameter);
        }
    
        public virtual ObjectResult<getCreditorsInvoiceWithoutCompany_Result> getCreditorsInvoiceWithoutCompany(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string pfcode)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var pfcodeParameter = pfcode != null ?
                new ObjectParameter("pfcode", pfcode) :
                new ObjectParameter("pfcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getCreditorsInvoiceWithoutCompany_Result>("getCreditorsInvoiceWithoutCompany", fromDateParameter, toDateParameter, pfcodeParameter);
        }
    
        public virtual int RenewalpaymentLogSave(string pfcode, string ownerName, Nullable<double> totalAmount, Nullable<long> registrationId, string paymentLogId, string status, Nullable<System.DateTime> dateTime, string description, string renewalStatus, Nullable<System.DateTime> renewalDate, string paymentmethod)
        {
            var pfcodeParameter = pfcode != null ?
                new ObjectParameter("Pfcode", pfcode) :
                new ObjectParameter("Pfcode", typeof(string));
    
            var ownerNameParameter = ownerName != null ?
                new ObjectParameter("ownerName", ownerName) :
                new ObjectParameter("ownerName", typeof(string));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("totalAmount", totalAmount) :
                new ObjectParameter("totalAmount", typeof(double));
    
            var registrationIdParameter = registrationId.HasValue ?
                new ObjectParameter("registrationId", registrationId) :
                new ObjectParameter("registrationId", typeof(long));
    
            var paymentLogIdParameter = paymentLogId != null ?
                new ObjectParameter("paymentLogId", paymentLogId) :
                new ObjectParameter("paymentLogId", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("dateTime", dateTime) :
                new ObjectParameter("dateTime", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var renewalStatusParameter = renewalStatus != null ?
                new ObjectParameter("RenewalStatus", renewalStatus) :
                new ObjectParameter("RenewalStatus", typeof(string));
    
            var renewalDateParameter = renewalDate.HasValue ?
                new ObjectParameter("RenewalDate", renewalDate) :
                new ObjectParameter("RenewalDate", typeof(System.DateTime));
    
            var paymentmethodParameter = paymentmethod != null ?
                new ObjectParameter("paymentmethod", paymentmethod) :
                new ObjectParameter("paymentmethod", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RenewalpaymentLogSave", pfcodeParameter, ownerNameParameter, totalAmountParameter, registrationIdParameter, paymentLogIdParameter, statusParameter, dateTimeParameter, descriptionParameter, renewalStatusParameter, renewalDateParameter, paymentmethodParameter);
        }
    
        public virtual int FranchiseeSave(string pF_Code, string franchisee_Name, string sendermail, Nullable<System.DateTime> datetime_Fr, string ownerName, string password, string contactNo, string f_Address)
        {
            var pF_CodeParameter = pF_Code != null ?
                new ObjectParameter("PF_Code", pF_Code) :
                new ObjectParameter("PF_Code", typeof(string));
    
            var franchisee_NameParameter = franchisee_Name != null ?
                new ObjectParameter("Franchisee_Name", franchisee_Name) :
                new ObjectParameter("Franchisee_Name", typeof(string));
    
            var sendermailParameter = sendermail != null ?
                new ObjectParameter("Sendermail", sendermail) :
                new ObjectParameter("Sendermail", typeof(string));
    
            var datetime_FrParameter = datetime_Fr.HasValue ?
                new ObjectParameter("Datetime_Fr", datetime_Fr) :
                new ObjectParameter("Datetime_Fr", typeof(System.DateTime));
    
            var ownerNameParameter = ownerName != null ?
                new ObjectParameter("OwnerName", ownerName) :
                new ObjectParameter("OwnerName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var f_AddressParameter = f_Address != null ?
                new ObjectParameter("F_Address", f_Address) :
                new ObjectParameter("F_Address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FranchiseeSave", pF_CodeParameter, franchisee_NameParameter, sendermailParameter, datetime_FrParameter, ownerNameParameter, passwordParameter, contactNoParameter, f_AddressParameter);
        }
    
        public virtual int registrationSave(string pfcode, string franchiseName, string emailId, Nullable<System.DateTime> dateTime, string ownerName, string userName, string password, Nullable<bool> isPaid, string mobileNo, string address, string referralCode, string referralby)
        {
            var pfcodeParameter = pfcode != null ?
                new ObjectParameter("Pfcode", pfcode) :
                new ObjectParameter("Pfcode", typeof(string));
    
            var franchiseNameParameter = franchiseName != null ?
                new ObjectParameter("franchiseName", franchiseName) :
                new ObjectParameter("franchiseName", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("emailId", emailId) :
                new ObjectParameter("emailId", typeof(string));
    
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("dateTime", dateTime) :
                new ObjectParameter("dateTime", typeof(System.DateTime));
    
            var ownerNameParameter = ownerName != null ?
                new ObjectParameter("ownerName", ownerName) :
                new ObjectParameter("ownerName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var isPaidParameter = isPaid.HasValue ?
                new ObjectParameter("isPaid", isPaid) :
                new ObjectParameter("isPaid", typeof(bool));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("mobileNo", mobileNo) :
                new ObjectParameter("mobileNo", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var referralCodeParameter = referralCode != null ?
                new ObjectParameter("referralCode", referralCode) :
                new ObjectParameter("referralCode", typeof(string));
    
            var referralbyParameter = referralby != null ?
                new ObjectParameter("referralby", referralby) :
                new ObjectParameter("referralby", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("registrationSave", pfcodeParameter, franchiseNameParameter, emailIdParameter, dateTimeParameter, ownerNameParameter, userNameParameter, passwordParameter, isPaidParameter, mobileNoParameter, addressParameter, referralCodeParameter, referralbyParameter);
        }
    
        public virtual int paymentLogSave(string pfcode, string ownerName, Nullable<double> totalAmount, Nullable<long> registrationId, string paymentLogId, string status, Nullable<System.DateTime> dateTime, string description, string paymentmethod)
        {
            var pfcodeParameter = pfcode != null ?
                new ObjectParameter("Pfcode", pfcode) :
                new ObjectParameter("Pfcode", typeof(string));
    
            var ownerNameParameter = ownerName != null ?
                new ObjectParameter("ownerName", ownerName) :
                new ObjectParameter("ownerName", typeof(string));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("totalAmount", totalAmount) :
                new ObjectParameter("totalAmount", typeof(double));
    
            var registrationIdParameter = registrationId.HasValue ?
                new ObjectParameter("registrationId", registrationId) :
                new ObjectParameter("registrationId", typeof(long));
    
            var paymentLogIdParameter = paymentLogId != null ?
                new ObjectParameter("paymentLogId", paymentLogId) :
                new ObjectParameter("paymentLogId", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("dateTime", dateTime) :
                new ObjectParameter("dateTime", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var paymentmethodParameter = paymentmethod != null ?
                new ObjectParameter("paymentmethod", paymentmethod) :
                new ObjectParameter("paymentmethod", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("paymentLogSave", pfcodeParameter, ownerNameParameter, totalAmountParameter, registrationIdParameter, paymentLogIdParameter, statusParameter, dateTimeParameter, descriptionParameter, paymentmethodParameter);
        }
    
        public virtual ObjectResult<dashboardData_Result> dashboardData(Nullable<System.DateTime> currentDate, string pfcode)
        {
            var currentDateParameter = currentDate.HasValue ?
                new ObjectParameter("currentDate", currentDate) :
                new ObjectParameter("currentDate", typeof(System.DateTime));
    
            var pfcodeParameter = pfcode != null ?
                new ObjectParameter("Pfcode", pfcode) :
                new ObjectParameter("Pfcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dashboardData_Result>("dashboardData", currentDateParameter, pfcodeParameter);
        }
    }
}
